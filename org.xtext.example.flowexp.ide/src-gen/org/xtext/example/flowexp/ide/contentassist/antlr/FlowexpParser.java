/*
 * generated by Xtext 2.15.0
 */
package org.xtext.example.flowexp.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.flowexp.ide.contentassist.antlr.internal.InternalFlowexpParser;
import org.xtext.example.flowexp.services.FlowexpGrammarAccess;

public class FlowexpParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(FlowexpGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, FlowexpGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getExpNbAccess().getAlternatives(), "rule__ExpNb__Alternatives");
			builder.put(grammarAccess.getPhaseAccess().getAlternatives(), "rule__Phase__Alternatives");
			builder.put(grammarAccess.getInitAccess().getAlternatives(), "rule__Init__Alternatives");
			builder.put(grammarAccess.getPeriodicityAccess().getAlternatives(), "rule__Periodicity__Alternatives");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getExpNbAccess().getGroup_0(), "rule__ExpNb__Group_0__0");
			builder.put(grammarAccess.getExpNbAccess().getGroup_1(), "rule__ExpNb__Group_1__0");
			builder.put(grammarAccess.getInitOneAccess().getGroup(), "rule__InitOne__Group__0");
			builder.put(grammarAccess.getInitOneAccess().getGroup_2(), "rule__InitOne__Group_2__0");
			builder.put(grammarAccess.getModelAccess().getExprAssignment_2(), "rule__Model__ExprAssignment_2");
			builder.put(grammarAccess.getModelAccess().getPhaseAssignment_5(), "rule__Model__PhaseAssignment_5");
			builder.put(grammarAccess.getModelAccess().getModelnameAssignment_8(), "rule__Model__ModelnameAssignment_8");
			builder.put(grammarAccess.getModelAccess().getInitAssignment_11(), "rule__Model__InitAssignment_11");
			builder.put(grammarAccess.getInitOneAccess().getFilenameAssignment_1(), "rule__InitOne__FilenameAssignment_1");
			builder.put(grammarAccess.getInitOneAccess().getFilenameAssignment_2_1(), "rule__InitOne__FilenameAssignment_2_1");
			builder.put(grammarAccess.getInitOneAccess().getTvalAssignment_4(), "rule__InitOne__TvalAssignment_4");
			builder.put(grammarAccess.getInitOneAccess().getPvalAssignment_6(), "rule__InitOne__PvalAssignment_6");
			builder.put(grammarAccess.getInitOneAccess().getSrvalAssignment_10(), "rule__InitOne__SrvalAssignment_10");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private FlowexpGrammarAccess grammarAccess;

	@Override
	protected InternalFlowexpParser createParser() {
		InternalFlowexpParser result = new InternalFlowexpParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public FlowexpGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(FlowexpGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
